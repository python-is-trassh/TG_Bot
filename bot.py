import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile, ContentType
import asyncpg
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(',')))
DATABASE_URL = os.getenv('DATABASE_URL')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_contact = State()
    waiting_for_address = State()

class AdminStates(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_product_price = State()
    waiting_for_product_description = State()
    waiting_for_product_photo = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_db_connection():
    return await asyncpg.connect(DATABASE_URL)

async def init_db():
    conn = await create_db_connection()
    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                price INTEGER NOT NULL,
                description TEXT,
                photo_id VARCHAR(200)
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                contact_info TEXT NOT NULL,
                address TEXT NOT NULL,
                total_price INTEGER NOT NULL,
                status VARCHAR(20) DEFAULT 'new',
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                id SERIAL PRIMARY KEY,
                order_id INTEGER REFERENCES orders(id),
                product_id INTEGER REFERENCES products(id),
                quantity INTEGER NOT NULL,
                price INTEGER NOT NULL
            )
        ''')
    finally:
        await conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.from_user.id in ADMIN_IDS:
        buttons = ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –û –Ω–∞—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    else:
        buttons = ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –û –Ω–∞—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    
    keyboard.add(*buttons)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(text="üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await cmd_start(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 1 (–Ω–∞–∑–≤–∞–Ω–∏–µ)
@dp.message_handler(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_step1(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await AdminStates.waiting_for_product_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 2 (—Ü–µ–Ω–∞)
@dp.message_handler(state=AdminStates.waiting_for_product_name)
async def add_product_step2(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await AdminStates.waiting_for_product_price.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 3 (–æ–ø–∏—Å–∞–Ω–∏–µ)
@dp.message_handler(state=AdminStates.waiting_for_product_price)
async def add_product_step3(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    await state.update_data(price=int(message.text))
    await AdminStates.waiting_for_product_description.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 4 (—Ñ–æ—Ç–æ)
@dp.message_handler(state=AdminStates.waiting_for_product_description)
async def add_product_step4(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await AdminStates.waiting_for_product_photo.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.message_handler(state=AdminStates.waiting_for_product_photo, content_types=ContentType.PHOTO)
async def add_product_final(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    user_data = await state.get_data()
    
    conn = await create_db_connection()
    try:
        await conn.execute(
            '''
            INSERT INTO products (name, price, description, photo_id)
            VALUES ($1, $2, $3, $4)
            ''',
            user_data['name'], user_data['price'], user_data['description'], photo_id
        )
        await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
    finally:
        await conn.close()
        await state.finish()

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∞–¥–º–∏–Ω)
@dp.message_handler(text="üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_products_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    conn = await create_db_connection()
    try:
        products = await conn.fetch("SELECT * FROM products")
        
        if not products:
            await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        for product in products:
            caption = (
                f"ID: {product['id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}"
            )
            
            if product['photo_id']:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=product['photo_id'],
                    caption=caption
                )
            else:
                await message.answer(caption)
    finally:
        await conn.close()

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
@dp.message_handler(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    conn = await create_db_connection()
    try:
        products = await conn.fetch("SELECT * FROM products")
        
        if not products:
            await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        for product in products:
            caption = (
                f"{product['name']}\n"
                f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"{product['description']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ ({product['id']}) —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
            )
            
            if product['photo_id']:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=product['photo_id'],
                    caption=caption
                )
            else:
                await message.answer(caption)
    finally:
        await conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.message_handler(lambda message: message.text.isdigit())
async def add_to_cart(message: types.Message):
    product_id = int(message.text)
    
    conn = await create_db_connection()
    try:
        product = await conn.fetchrow("SELECT * FROM products WHERE id = $1", product_id)
        
        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await UserStates.waiting_for_quantity.set()
        state = dp.current_state(user=message.from_user.id)
        await state.update_data(product_id=product_id)
        
        response = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']}\n–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
        
        if product['photo_id']:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=product['photo_id'],
                caption=response
            )
        else:
            await message.answer(response)
    finally:
        await conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=UserStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    quantity = int(message.text)
    if quantity <= 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
        return
    
    user_data = await state.get_data()
    product_id = user_data['product_id']
    
    conn = await create_db_connection()
    try:
        product = await conn.fetchrow("SELECT * FROM products WHERE id = $1", product_id)
        
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. {product['name']} –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {product['price'] * quantity} —Ä—É–±."
        )
    finally:
        await conn.close()
    
    await state.finish()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    
    conn = await create_db_connection()
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")
    finally:
        await conn.close()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
@dp.message_handler(text="‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: types.Message):
    await message.answer(
        "–ú—ã - –ª—É—á—à–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!\n"
        "–†–∞–±–æ—Ç–∞–µ–º —Å 2020 –≥–æ–¥–∞. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞!"
    )

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.message_handler(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer(
        "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\n"
        "Email: info@example.com\n"
        "–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1"
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message_handler(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    conn = await create_db_connection()
    try:
        total_products = await conn.fetchval("SELECT COUNT(*) FROM products")
        total_orders = await conn.fetchval("SELECT COUNT(*) FROM orders")
        total_revenue = await conn.fetchval("SELECT COALESCE(SUM(total_price), 0) FROM orders")
        
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
            f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {total_products}\n"
            f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±."
        )
    finally:
        await conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    await init_db()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)