import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import asyncpg
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []
DATABASE_URL = os.getenv('DATABASE_URL')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class AdminStates(StatesGroup):
    waiting_product_name = State()
    waiting_product_description = State()
    waiting_product_price = State()
    waiting_product_photos = State()
    waiting_product_items = State()

# ========== –ö–û–†–ó–ò–ù–ê ==========
class Cart:
    def __init__(self, user_id):
        self.user_id = user_id
        self.items = {}
    
    def add_item(self, product_id, quantity=1):
        if product_id in self.items:
            self.items[product_id] += quantity
        else:
            self.items[product_id] = quantity
    
    def remove_item(self, product_id, quantity=1):
        if product_id in self.items:
            if self.items[product_id] <= quantity:
                del self.items[product_id]
            else:
                self.items[product_id] -= quantity
            return True
        return False
    
    def clear(self):
        self.items = {}
    
    def get_total_items(self):
        return sum(self.items.values())
    
    async def get_cart_details(self, conn):
        if not self.items:
            return None, 0
        
        products = []
        total_price = 0
        
        for product_id, quantity in self.items.items():
            product = await conn.fetchrow(
                "SELECT id, name, price, photo_ids FROM products WHERE id = $1",
                product_id
            )
            if product:
                products.append({
                    'id': product['id'],
                    'name': product['name'],
                    'price': product['price'],
                    'quantity': quantity,
                    'photo': product['photo_ids'][0] if product['photo_ids'] else None
                })
                total_price += product['price'] * quantity
        
        return products, total_price

user_carts = {}

def get_user_cart(user_id):
    if user_id not in user_carts:
        user_carts[user_id] = Cart(user_id)
    return user_carts[user_id]

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
async def create_db_connection():
    try:
        return await asyncpg.connect(DATABASE_URL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

async def init_db():
    conn = await create_db_connection()
    if not conn:
        return False

    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                price DECIMAL(10, 2) NOT NULL,
                photo_ids TEXT[],
                created_at TIMESTAMP DEFAULT NOW(),
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS product_items (
                id SERIAL PRIMARY KEY,
                product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
                location VARCHAR(100) NOT NULL,
                unique_code VARCHAR(50) UNIQUE NOT NULL,
                is_sold BOOLEAN DEFAULT FALSE,
                sold_at TIMESTAMP,
                sold_to BIGINT
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                total_amount DECIMAL(10, 2) NOT NULL,
                status VARCHAR(20) DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                id SERIAL PRIMARY KEY,
                order_id INTEGER REFERENCES orders(id) ON DELETE CASCADE,
                product_id INTEGER REFERENCES products(id),
                item_id INTEGER REFERENCES product_items(id),
                price DECIMAL(10, 2) NOT NULL
            )
        ''')

        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False
    finally:
        await conn.close()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    
    if message.from_user.id in ADMIN_IDS:
        buttons.append("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    keyboard.add(*buttons)
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!",
        reply_markup=keyboard
    )

@dp.message_handler(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üõçÔ∏è <b>–ö–∞—Ç–∞–ª–æ–≥</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤\n"
        "üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b> - –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã\n"
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    await message.answer(help_text, parse_mode="HTML")

# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========
@dp.message_handler(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
        "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üîô –ù–∞–∑–∞–¥"
    ]
    keyboard.add(*buttons)
    
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

@dp.message_handler(text="üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await cmd_start(message)

# ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ==========
@dp.message_handler(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def start_adding_product(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AdminStates.waiting_product_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AdminStates.waiting_product_name)
async def process_product_name(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    await state.update_data(name=message.text)
    await AdminStates.waiting_product_description.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AdminStates.waiting_product_description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await AdminStates.waiting_product_price.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message_handler(state=AdminStates.waiting_product_price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = round(float(message.text), 2)
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
            
        await state.update_data(price=price)
        await AdminStates.waiting_product_photos.set()
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
        
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=AdminStates.waiting_product_photos)
async def process_product_photos(message: types.Message, state: FSMContext):
    try:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        photo_ids = data.get('photo_ids', [])
        
        if len(photo_ids) >= 10:
            await message.answer("–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ")
            return
            
        photo_ids.append(photo_id)
        await state.update_data(photo_ids=photo_ids)
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
        keyboard.add("üñº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ")
        
        await message.answer(
            f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {len(photo_ids)}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")

@dp.message_handler(text="üñº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ", state=AdminStates.waiting_product_photos)
async def view_added_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_ids = data.get('photo_ids', [])
    
    if not photo_ids:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ")
        return
    
    media = [types.InputMediaPhoto(photo_ids[0], caption=f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ (1/{len(photo_ids)})")]
    media.extend([types.InputMediaPhoto(pid) for pid in photo_ids[1:]])
    
    await bot.send_media_group(message.chat.id, media)

@dp.message_handler(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ", state=AdminStates.waiting_product_photos)
async def remove_last_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_ids = data.get('photo_ids', [])
    
    if not photo_ids:
        await message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    photo_ids.pop()
    await state.update_data(photo_ids=photo_ids)
    await message.answer(f"–£–¥–∞–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ: {len(photo_ids)}")

@dp.message_handler(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", state=AdminStates.waiting_product_photos)
async def finish_adding_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        await state.finish()
        return
    
    try:
        product = await conn.fetchrow(
            '''INSERT INTO products (name, description, price, photo_ids)
            VALUES ($1, $2, $3, $4) RETURNING id''',
            data['name'], data['description'], data['price'], data.get('photo_ids', [])
        )
        
        await state.update_data(product_id=product['id'])
        await AdminStates.waiting_product_items.set()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω! ID: {product['id']}\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–õ–æ–∫–∞—Ü–∏—è, –£–Ω–∏–∫–∞–ª—å–Ω—ã–π–ö–æ–¥</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, ABC123",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        await state.finish()
    finally:
        await conn.close()

@dp.message_handler(state=AdminStates.waiting_product_items)
async def process_product_items(message: types.Message, state: FSMContext):
    if message.text.lower() == '/done':
        data = await state.get_data()
        conn = await create_db_connection()
        if not conn:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            await state.finish()
            return
        
        try:
            items_count = await conn.fetchval(
                "SELECT COUNT(*) FROM product_items WHERE product_id = $1",
                data.get('product_id', 0)
            )
            
            await message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name', 'N/A')}\n"
                f"–ü–æ–∑–∏—Ü–∏–π: {items_count}"
            )
        finally:
            await conn.close()
            await state.finish()
        return
    
    try:
        location, code = [x.strip() for x in message.text.split(',', 1)]
        if not location or not code:
            raise ValueError
        
        data = await state.get_data()
        product_id = data.get('product_id')
        if not product_id:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–æ–≤–∞—Ä–∞")
        
        conn = await create_db_connection()
        if not conn:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return
        
        try:
            await conn.execute(
                "INSERT INTO product_items (product_id, location, unique_code) "
                "VALUES ($1, $2, $3)",
                product_id, location, code
            )
            
            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
                f"–ö–æ–¥: {code}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )
        except asyncpg.UniqueViolationError:
            await message.answer("‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏")
        finally:
            await conn.close()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ:\n"
            "–õ–æ–∫–∞—Ü–∏—è, –£–Ω–∏–∫–∞–ª—å–Ω—ã–π–ö–æ–¥\n"
            "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, ABC123"
        )

# ========== –ö–ê–¢–ê–õ–û–ì –ò –ö–û–†–ó–ò–ù–ê ==========
@dp.message_handler(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        products = await conn.fetch(
            "SELECT * FROM products WHERE is_active = TRUE ORDER BY id DESC"
        )
        if not products:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        for product in products:
            available = await conn.fetchval(
                "SELECT COUNT(*) FROM product_items "
                "WHERE product_id = $1 AND is_sold = FALSE",
                product['id']
            )
            
            if available <= 0:
                continue
            
            btn_text = f"{product['name']} - {product['price']} —Ä—É–±."
            keyboard.add(types.InlineKeyboardButton(
                btn_text, callback_data=f"product_{product['id']}"
            ))
        
        await message.answer(
            "üõçÔ∏è <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('product_'))
async def show_product_details(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        product = await conn.fetchrow(
            "SELECT * FROM products WHERE id = $1 AND is_active = TRUE",
            product_id
        )
        if not product:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        available = await conn.fetchval(
            "SELECT COUNT(*) FROM product_items "
            "WHERE product_id = $1 AND is_sold = FALSE",
            product['id']
        )
        
        if available <= 0:
            await callback_query.answer("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            return
        
        text = (
            f"üì¶ <b>{product['name']}</b>\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{product['description']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{product['price']} —Ä—É–±.</b>\n"
            f"üõí –í –Ω–∞–ª–∏—á–∏–∏: <b>{available} —à—Ç.</b>"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product['id']}"),
            types.InlineKeyboardButton("‚ûñ –ò–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"remove_from_cart_{product['id']}")
        )
        keyboard.add(types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"))
        
        if product['photo_ids']:
            await bot.send_photo(
                callback_query.message.chat.id,
                product['photo_ids'][0],
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                callback_query.message.chat.id,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")
    finally:
        await conn.close()

@dp.message_handler(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: types.Message):
    cart = get_user_cart(message.from_user.id)
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        products, total_price = await cart.get_cart_details(conn)
        if not products:
            await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        for product in products:
            text += (
                f"üì¶ {product['name']}\n"
                f"üí∞ {product['price']} —Ä—É–±. √ó {product['quantity']} = "
                f"{product['price'] * product['quantity']} —Ä—É–±.\n\n"
            )
        
        text += f"üíµ <b>–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.</b>"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
            types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        )
        
        if products[0]['photo']:
            await bot.send_photo(
                message.chat.id,
                products[0]['photo'],
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('add_to_cart_'))
async def add_to_cart(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[3])
    cart = get_user_cart(callback_query.from_user.id)
    
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        available = await conn.fetchval(
            "SELECT COUNT(*) FROM product_items "
            "WHERE product_id = $1 AND is_sold = FALSE",
            product_id
        )
        
        if available <= 0:
            await callback_query.answer("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            return
        
        current_in_cart = cart.items.get(product_id, 0)
        if current_in_cart >= available:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return
        
        cart.add_item(product_id)
        await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É (–í—Å–µ–≥–æ: {cart.get_total_items()})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('remove_from_cart_'))
async def remove_from_cart(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[3])
    cart = get_user_cart(callback_query.from_user.id)
    
    if cart.remove_item(product_id):
        await callback_query.answer(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–í—Å–µ–≥–æ: {cart.get_total_items()})")
    else:
        await callback_query.answer("–≠—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ")

@dp.callback_query_handler(lambda c: c.data == 'view_cart')
async def callback_view_cart(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await view_cart(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'clear_cart')
async def clear_cart(callback_query: types.CallbackQuery):
    cart = get_user_cart(callback_query.from_user.id)
    cart.clear()
    await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await callback_query.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

@dp.callback_query_handler(lambda c: c.data == 'checkout')
async def checkout(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart = get_user_cart(user_id)
    
    if not cart.items:
        await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        products, total_price = await cart.get_cart_details(conn)
        if not products:
            await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
        for product in products:
            available = await conn.fetchval(
                "SELECT COUNT(*) FROM product_items "
                "WHERE product_id = $1 AND is_sold = FALSE",
                product['id']
            )
            
            if available < product['quantity']:
                await callback_query.answer(
                    f"–¢–æ–≤–∞—Ä–∞ '{product['name']}' –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {available} —à—Ç.",
                    show_alert=True
                )
                return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order_id = await conn.fetchval(
            '''INSERT INTO orders (user_id, total_amount)
            VALUES ($1, $2) RETURNING id''',
            user_id, total_price
        )
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        for product in products:
            items = await conn.fetch(
                '''UPDATE product_items
                SET is_sold = TRUE, sold_to = $1, sold_at = NOW()
                WHERE id IN (
                    SELECT id FROM product_items
                    WHERE product_id = $2 AND is_sold = FALSE
                    LIMIT $3
                )
                RETURNING id''',
                user_id, product['id'], product['quantity']
            )
            
            for item in items:
                await conn.execute(
                    '''INSERT INTO order_items (order_id, product_id, item_id, price)
                    VALUES ($1, $2, $3, $4)''',
                    order_id, product['id'], item['id'], product['price']
                )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"üÜî –ù–æ–º–µ—Ä: <code>{order_id}</code>\n"
            f"üíµ –°—É–º–º–∞: <b>{total_price} —Ä—É–±.</b>\n\n"
            "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n"
        )
        
        for product in products:
            text += f"üì¶ {product['name']} √ó {product['quantity']}\n"
        
        cart.clear()
        await callback_query.message.edit_text(text, parse_mode="HTML")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.mention}\n"
                    f"üíµ –°—É–º–º–∞: {total_price} —Ä—É–±.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    finally:
        await conn.close()

# ========== –ó–ê–ü–£–°–ö ==========
async def on_startup(dp):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    if await init_db():
        logger.info("–ë–î –≥–æ—Ç–æ–≤–∞")
    else:
        logger.error("–û—à–∏–±–∫–∞ –ë–î")
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

async def on_shutdown(dp):
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await dp.storage.close()
    await dp.storage.wait_closed()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(
        dp,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True
    )
