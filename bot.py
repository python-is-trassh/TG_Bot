import logging
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncpg
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS', '').split(',') if id]
DATABASE_URL = os.getenv('DATABASE_URL')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_contact = State()
    waiting_for_address = State()

class AdminStates(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_product_price = State()
    waiting_for_product_description = State()
    waiting_for_product_photo = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                price DECIMAL(10, 2) NOT NULL,
                photo_ids TEXT[],  # –ú–∞—Å—Å–∏–≤ photo_id
                created_at TIMESTAMP DEFAULT NOW(),
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ç–æ–≤–∞—Ä–∞)
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS product_items (
                id SERIAL PRIMARY KEY,
                product_id INTEGER REFERENCES products(id),
                location VARCHAR(100) NOT NULL,
                unique_code VARCHAR(50) UNIQUE,
                is_sold BOOLEAN DEFAULT FALSE,
                sold_at TIMESTAMP,
                sold_to INTEGER  # user_id –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS carts (
                user_id BIGINT PRIMARY KEY,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS cart_items (
                id SERIAL PRIMARY KEY,
                cart_user_id BIGINT REFERENCES carts(user_id),
                product_item_id INTEGER REFERENCES product_items(id),
                quantity INTEGER DEFAULT 1,
                added_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                total_amount DECIMAL(10, 2) NOT NULL,
                status VARCHAR(20) DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT NOW(),
                completed_at TIMESTAMP
            )
        ''')
        
        # –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                id SERIAL PRIMARY KEY,
                order_id INTEGER REFERENCES orders(id),
                product_item_id INTEGER REFERENCES product_items(id),
                quantity INTEGER NOT NULL,
                price DECIMAL(10, 2) NOT NULL,
                location VARCHAR(100) NOT NULL
            )
        ''' 
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        await conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.from_user.id in ADMIN_IDS:
        buttons = ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –û –Ω–∞—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    else:
        buttons = ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –û –Ω–∞—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    
    keyboard.add(*buttons)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(text="üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await cmd_start(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 1 (–Ω–∞–∑–≤–∞–Ω–∏–µ)
@dp.message_handler(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
class AddProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_photos = State()
    waiting_for_items = State()

@dp.message_handler(commands=['add_product'])
async def start_adding_product(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AddProductStates.waiting_for_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AddProductStates.waiting_for_name)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await AddProductStates.waiting_for_description.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AddProductStates.waiting_for_description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await AddProductStates.waiting_for_price.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AddProductStates.waiting_for_price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await AddProductStates.waiting_for_photos.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–ª—å–±–æ–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")

@dp.message_handler(state=AddProductStates.waiting_for_photos, content_types=types.ContentType.PHOTO)
async def process_product_photos(message: types.Message, state: FSMContext):
    photo_ids = [photo.file_id for photo in message.photo]
    await state.update_data(photo_ids=photo_ids)
    
    data = await state.get_data()
    
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        product = await conn.fetchrow(
            'INSERT INTO products (name, description, price, photo_ids) '
            'VALUES ($1, $2, $3, $4) RETURNING *',
            data['name'], data['description'], data['price'], data['photo_ids']
        )
        
        await state.update_data(product_id=product['id'])
        await AddProductStates.waiting_for_items.set()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä {product['name']} —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, ABC123):"
        )
    finally:
        await conn.close()

@dp.message_handler(state=AddProductStates.waiting_for_items)
async def process_product_items(message: types.Message, state: FSMContext):
    try:
        location, unique_code = map(str.strip, message.text.split(','))
        data = await state.get_data()
        
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            await conn.execute(
                'INSERT INTO product_items (product_id, location, unique_code) '
                'VALUES ($1, $2, $3)',
                data['product_id'], location, unique_code
            )
            
            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {location} - {unique_code}\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –ª–æ–∫–∞—Ü–∏—è,–∫–æ–¥ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )
        finally:
            await conn.close()
    except Exception as e:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, ABC123"
        )

@dp.message_handler(commands=['done'], state=AddProductStates.waiting_for_items)
async def finish_adding_items(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.finish()
    
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        items_count = await conn.fetchval(
            'SELECT COUNT(*) FROM product_items WHERE product_id = $1',
            data['product_id']
        )
        
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"–ü–æ–∑–∏—Ü–∏–π: {items_count}\n"
            f"–¢–µ–ø–µ—Ä—å —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
        )
    finally:
        await conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda c: c.data.startswith('delete_'))
async def process_delete_product(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[1])
    
    conn = await create_db_connection()
    try:
        product = await conn.fetchrow("SELECT * FROM products WHERE id = $1", product_id)
        
        if not product:
            await bot.answer_callback_query(callback_query.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ order_items —Å–Ω–∞—á–∞–ª–∞
        await conn.execute("DELETE FROM order_items WHERE product_id = $1", product_id)
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
        await conn.execute("DELETE FROM products WHERE id = $1", product_id)
        
        await bot.answer_callback_query(callback_query.id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!")
        await bot.send_message(
            callback_query.from_user.id,
            f"üóëÔ∏è –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω:\n"
            f"ID: {product['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        await delete_product_start(callback_query.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await bot.answer_callback_query(callback_query.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await conn.close()

#–∫–∞—Ç–∞–ª–æ–≥
@dp.message_handler(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        products = await conn.fetch(
            'SELECT * FROM products WHERE is_active = TRUE ORDER BY id'
        )
        
        if not products:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
            return
        
        for product in products:
            available_items = await conn.fetchval(
                'SELECT COUNT(*) FROM product_items '
                'WHERE product_id = $1 AND is_sold = FALSE',
                product['id']
            )
            
            text = (
                f"üì¶ *{product['name']}*\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"üõí –î–æ—Å—Ç—É–ø–Ω–æ: {available_items} —à—Ç.\n"
                f"üìù {product['description']}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
            if product['photo_ids']:
                media = [types.InputMediaPhoto(product['photo_ids'][0], caption=text)]
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                for photo_id in product['photo_ids'][1:]:
                    media.append(types.InputMediaPhoto(photo_id))
                
                await bot.send_media_group(message.chat.id, media)
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                "üìç –í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é", 
                callback_data=f"select_location_{product['id']}"
            ))
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                reply_markup=keyboard
            )
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('select_location_'))
async def select_location(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[2])
    
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        locations = await conn.fetch(
            'SELECT DISTINCT location FROM product_items '
            'WHERE product_id = $1 AND is_sold = FALSE',
            product_id
        )
        
        if not locations:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        for loc in locations:
            keyboard.add(InlineKeyboardButton(
                loc['location'], 
                callback_data=f"show_items_{product_id}_{loc['location']}"
            ))
        
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=keyboard
        )
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('show_items_'))
async def show_available_items(callback_query: types.CallbackQuery):
    _, _, product_id, location = callback_query.data.split('_')
    product_id = int(product_id)
    
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        items = await conn.fetch(
            'SELECT id, unique_code FROM product_items '
            'WHERE product_id = $1 AND location = $2 AND is_sold = FALSE',
            product_id, location
        )
        
        if not items:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
        
        product = await conn.fetchrow(
            'SELECT name, price FROM products WHERE id = $1', 
            product_id
        )
        
        text = (
            f"üìç *{location}*\n"
            f"üì¶ {product['name']} - {product['price']} —Ä—É–±.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:"
        )
        
        keyboard = InlineKeyboardMarkup()
        for item in items:
            keyboard.add(InlineKeyboardButton(
                f"üõí {item['unique_code']}", 
                callback_data=f"add_to_cart_{item['id']}"
            ))
        
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard
        )
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('add_to_cart_'))
async def add_item_to_cart(callback_query: types.CallbackQuery):
    item_id = int(callback_query.data.split('_')[3])
    
    success = await add_to_cart(callback_query.from_user.id, item_id)
    if success:
        await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
```

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∞–¥–º–∏–Ω)
@dp.message_handler(text="üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_products_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    
    conn = await create_db_connection()
    try:
        products = await conn.fetch("SELECT * FROM products ORDER BY id")
        
        if not products:
            await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        for product in products:
            caption = (
                f"üÜî ID: {product['id']}\n"
                f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
                f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {product['created_at'].strftime('%d.%m.%Y %H:%M')}"
            )
            
            if product['photo_id']:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=product['photo_id'],
                    caption=caption
                )
            else:
                await message.answer(caption)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        await conn.close()

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
@dp.message_handler(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    conn = await create_db_connection()
    try:
        products = await conn.fetch("SELECT * FROM products ORDER BY id")
        
        if not products:
            await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        for product in products:
            caption = (
                f"üìõ {product['name']}\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"üìù {product['description']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ ({product['id']}) —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
            )
            
            if product['photo_id']:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=product['photo_id'],
                    caption=caption
                )
            else:
                await message.answer(caption)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")
    finally:
        await conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.message_handler(lambda message: message.text.isdigit())
async def get_or_create_cart(user_id: int):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        cart = await conn.fetchrow(
            'SELECT * FROM carts WHERE user_id = $1', user_id
        )
        if not cart:
            cart = await conn.fetchrow(
                'INSERT INTO carts (user_id) VALUES ($1) RETURNING *', user_id
            )
        return cart
    finally:
        await conn.close()

async def add_to_cart(user_id: int, product_item_id: int):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        item = await conn.fetchrow(
            'SELECT * FROM product_items WHERE id = $1 AND is_sold = FALSE', 
            product_item_id
        )
        if not item:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        await conn.execute('''
            INSERT INTO cart_items (cart_user_id, product_item_id)
            VALUES ($1, $2)
            ON CONFLICT (cart_user_id, product_item_id) 
            DO UPDATE SET quantity = cart_items.quantity + 1
        ''', user_id, product_item_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        await conn.execute(
            'UPDATE carts SET updated_at = NOW() WHERE user_id = $1', 
            user_id
        )
        return True
    finally:
        await conn.close()

async def get_cart_contents(user_id: int):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        return await conn.fetch('''
            SELECT 
                ci.id as cart_item_id,
                pi.id as product_item_id,
                p.name,
                p.description,
                p.price,
                pi.location,
                ci.quantity
            FROM cart_items ci
            JOIN product_items pi ON ci.product_item_id = pi.id
            JOIN products p ON pi.product_id = p.id
            WHERE ci.cart_user_id = $1
            ORDER BY ci.added_at DESC
        ''', user_id)
    finally:
        await conn.close()

# ========== –•–ï–ù–î–õ–ï–†–´ –ö–û–†–ó–ò–ù–´ ==========

@dp.message_handler(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    cart_items = await get_cart_contents(message.from_user.id)
    
    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = sum(item['price'] * item['quantity'] for item in cart_items)
    text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"
    
    for item in cart_items:
        text += (
            f"üìå *{item['name']}*\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {item['location']}\n"
            f"üí∞ –¶–µ–Ω–∞: {item['price']} —Ä—É–±. √ó {item['quantity']} = "
            f"{item['price'] * item['quantity']} —Ä—É–±.\n"
            f"‚îî‚îÄ‚îÄ [–£–¥–∞–ª–∏—Ç—å](tg://btn/{item['cart_item_id']})\n\n"
        )
    
    text += f"üíµ *–ò—Ç–æ–≥–æ: {total} —Ä—É–±.*"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data == "checkout")
async def process_checkout(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart_items = await get_cart_contents(user_id)
    
    if not cart_items:
        await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        total = sum(item['price'] * item['quantity'] for item in cart_items)
        order = await conn.fetchrow(
            'INSERT INTO orders (user_id, total_amount) VALUES ($1, $2) RETURNING *',
            user_id, total
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for item in cart_items:
            await conn.execute('''
                INSERT INTO order_items 
                (order_id, product_item_id, quantity, price, location)
                VALUES ($1, $2, $3, $4, $5)
            ''', order['id'], item['product_item_id'], item['quantity'], 
            item['price'], item['location'])
            
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
            await conn.execute(
                'UPDATE product_items SET is_sold = TRUE, sold_at = NOW(), '
                'sold_to = $1 WHERE id = $2',
                user_id, item['product_item_id']
            )
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await conn.execute(
            'DELETE FROM cart_items WHERE cart_user_id = $1', 
            user_id
        )
        
        await callback_query.message.edit_text(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: #" + str(order['id']),
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['id']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.full_name}\n"
                f"üí≥ –°—É–º–º–∞: {total} —Ä—É–±.\n"
                f"üõí –¢–æ–≤–∞—Ä–æ–≤: {len(cart_items)}"
            )
    finally:
        await conn.close()
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=UserStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    quantity = int(message.text)
    if quantity <= 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
        return
    
    user_data = await state.get_data()
    product_id = user_data['product_id']
    
    conn = await create_db_connection()
    try:
        product = await conn.fetchrow("SELECT * FROM products WHERE id = $1", product_id)
        
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. {product['name']} –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {product['price'] * quantity} —Ä—É–±."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    finally:
        await conn.close()
        await state.finish()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    await message.answer("üõí –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ—Ä–∑–∏–Ω—ã –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message_handler(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    
    conn = await create_db_connection()
    try:
        total_products = await conn.fetchval("SELECT COUNT(*) FROM products")
        total_orders = await conn.fetchval("SELECT COUNT(*) FROM orders")
        total_revenue = await conn.fetchval("SELECT COALESCE(SUM(total_price), 0) FROM orders")
        last_products = await conn.fetch("SELECT * FROM products ORDER BY created_at DESC LIMIT 5")
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {total_products}\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±.\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        )
        
        for product in last_products:
            stats_text += f"- {product['name']} ({product['price']} —Ä—É–±.)\n"
        
        await message.answer(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        await conn.close()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
@dp.message_handler(text="‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: types.Message):
    await message.answer(
        "üè™ –ú—ã - –ª—É—á—à–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!\n"
        "üõ†Ô∏è –†–∞–±–æ—Ç–∞–µ–º —Å 2020 –≥–æ–¥–∞. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞!\n"
        "üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ"
    )

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.message_handler(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer(
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\n"
        "üìß Email: info@example.com\n"
        "üè† –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n\n"
        "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00"
    )

async def on_startup(dp):
    await init_db()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
