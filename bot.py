import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import asyncpg
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []
DATABASE_URL = os.getenv('DATABASE_URL')
BITCOIN_WALLET = os.getenv('BITCOIN_WALLET')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AdminStates(StatesGroup):
    waiting_category_name = State()
    waiting_product_name = State()
    waiting_product_description = State()
    waiting_product_price = State()
    waiting_product_content = State()
    waiting_product_locations = State()
    waiting_about_text = State()

class UserStates(StatesGroup):
    waiting_payment = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def create_db_connection():
    try:
        return await asyncpg.connect(DATABASE_URL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    conn = await create_db_connection()
    if not conn:
        return False

    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL UNIQUE,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                category_id INTEGER REFERENCES categories(id) ON DELETE CASCADE,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                price DECIMAL(10, 2) NOT NULL,
                content TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT NOW(),
                is_active BOOLEAN DEFAULT TRUE,
                UNIQUE(category_id, name)
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS locations (
                id SERIAL PRIMARY KEY,
                product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
                name VARCHAR(100) NOT NULL,
                quantity INTEGER NOT NULL DEFAULT 0,
                UNIQUE(product_id, name)
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                product_id INTEGER REFERENCES products(id),
                location_id INTEGER REFERENCES locations(id),
                user_id BIGINT NOT NULL,
                bitcoin_address VARCHAR(100) NOT NULL,
                amount DECIMAL(10, 8) NOT NULL,
                content TEXT NOT NULL,
                is_paid BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS shop_info (
                id INTEGER PRIMARY KEY DEFAULT 1,
                about_text TEXT NOT NULL,
                updated_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–æ –º–∞–≥–∞–∑–∏–Ω–µ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await conn.execute('''
            INSERT INTO shop_info (about_text) 
            VALUES ('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!')
            ON CONFLICT (id) DO NOTHING
        ''')

        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False
    finally:
        await conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin –ø–ª–∞—Ç–µ–∂–∞
async def check_bitcoin_payment(address, amount):
    try:
        url = f"https://blockchain.info/rawaddr/{address}"
        response = requests.get(url)
        data = response.json()
        
        total_received = data['total_received'] / 100000000  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Å–∞—Ç–æ—à–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞)
        for tx in data['txs']:
            tx_time = datetime.fromtimestamp(tx['time'])
            if (datetime.now() - tx_time).total_seconds() > 7200:
                continue
                
            for output in tx['out']:
                if output['addr'] == address and output['value'] / 100000000 >= amount:
                    return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Bitcoin –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

# ========== –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ")
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message_handler(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ")
async def show_about(message: types.Message):
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        about_text = await conn.fetchval("SELECT about_text FROM shop_info WHERE id = 1")
        await message.answer(about_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ: {e}")
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    finally:
        await conn.close()

@dp.message_handler(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(message: types.Message):
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        categories = await conn.fetch(
            "SELECT id, name FROM categories WHERE is_active = TRUE ORDER BY name"
        )
        
        if not categories:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(types.InlineKeyboardButton(
                category['name'],
                callback_data=f"category_{category['id']}"
            ))
        
        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def show_category_products(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        category_name = await conn.fetchval(
            "SELECT name FROM categories WHERE id = $1",
            category_id
        )
        
        products = await conn.fetch(
            "SELECT id, name, price FROM products WHERE category_id = $1 AND is_active = TRUE ORDER BY name",
            category_id
        )
        
        if not products:
            await callback_query.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for product in products:
            keyboard.add(types.InlineKeyboardButton(
                f"{product['name']} - {product['price']} BTC",
                callback_data=f"product_{product['id']}"
            ))
        
        await callback_query.message.edit_text(
            f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('product_'))
async def show_product_details(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        product = await conn.fetchrow(
            "SELECT p.id, p.name, p.description, p.price, c.name as category_name "
            "FROM products p JOIN categories c ON p.category_id = c.id "
            "WHERE p.id = $1",
            product_id
        )
        
        locations = await conn.fetch(
            "SELECT id, name, quantity FROM locations "
            "WHERE product_id = $1 AND quantity > 0",
            product_id
        )
        
        if not locations:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            return
        
        text = (
            f"üì¶ <b>{product['name']}</b>\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category_name']}\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{product['price']} BTC</b>\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{product['description']}\n\n"
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        for loc in locations:
            keyboard.add(types.InlineKeyboardButton(
                f"{loc['name']} (–¥–æ—Å—Ç—É–ø–Ω–æ: {loc['quantity']})",
                callback_data=f"location_{loc['id']}"
            ))
        
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('location_'))
async def process_location_selection(callback_query: types.CallbackQuery):
    location_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        location = await conn.fetchrow(
            "SELECT l.id, l.name, l.quantity, p.id as product_id, p.name as product_name, p.price "
            "FROM locations l JOIN products p ON l.product_id = p.id "
            "WHERE l.id = $1",
            location_id
        )
        
        if not location or location['quantity'] <= 0:
            await callback_query.answer("–≠—Ç–∞ –ª–æ–∫–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_address = BITCOIN_WALLET
        
        await callback_query.message.edit_text(
            f"üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: <b>{location['product_name']}</b>\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: <b>{location['name']}</b>\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{location['price']} BTC</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ Bitcoin –∞–¥—Ä–µ—Å:\n"
            f"<code>{payment_address}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        await UserStates.waiting_payment.set()
        state = dp.current_state(user=callback_query.from_user.id, chat=callback_query.message.chat.id)
        await state.update_data(
            product_id=location['product_id'],
            location_id=location_id,
            payment_address=payment_address,
            amount=location['price']
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    finally:
        await conn.close()

@dp.message_handler(state=UserStates.waiting_payment)
async def check_payment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        await state.finish()
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
        is_paid = await check_bitcoin_payment(data['payment_address'], data['amount'])
        
        if not is_paid:
            await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞
        product = await conn.fetchrow(
            "SELECT p.content, l.name as location_name "
            "FROM products p JOIN locations l ON p.id = l.product_id "
            "WHERE l.id = $1",
            data['location_id']
        )
        
        if not product:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.finish()
            return
        
        # –ü–æ–º–µ—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—É—é (—É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        await conn.execute(
            "UPDATE locations SET quantity = quantity - 1 WHERE id = $1",
            data['location_id']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        await conn.execute(
            "INSERT INTO orders (product_id, location_id, user_id, bitcoin_address, amount, content, is_paid) "
            "VALUES ($1, $2, $3, $4, $5, $6, TRUE)",
            data['product_id'],
            data['location_id'],
            message.from_user.id,
            data['payment_address'],
            data['amount'],
            product['content']
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à —Ç–æ–≤–∞—Ä:\n\n"
            f"{product['content']}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
                    f"üí∞ –°—É–º–º–∞: {data['amount']} BTC\n"
                    f"üìç –õ–æ–∫–∞—Ü–∏—è: {product['location_name']}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
    finally:
        await conn.close()
        await state.finish()

# ========== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==========
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    keyboard.row("üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    keyboard.row("üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏", "‚ÑπÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '–û –º–∞–≥–∞–∑–∏–Ω–µ'")
    keyboard.row("üîô –í –º–µ–Ω—é")
    
    await message.answer(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message_handler(text="üîô –í –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await cmd_start(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AdminStates.waiting_category_name.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(state=AdminStates.waiting_category_name)
async def add_category_finish(message: types.Message, state: FSMContext):
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        await state.finish()
        return
    
    try:
        await conn.execute(
            "INSERT INTO categories (name) VALUES ($1)",
            message.text
        )
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    except asyncpg.UniqueViolationError:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await conn.close()
        await state.finish()
        await admin_panel(message)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def delete_category_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        categories = await conn.fetch(
            "SELECT id, name FROM categories ORDER BY name"
        )
        
        if not categories:
            await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(types.InlineKeyboardButton(
                category['name'],
                callback_data=f"deletecat_{category['id']}"
            ))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('deletecat_'))
async def delete_category_finish(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        category_name = await conn.fetchval(
            "SELECT name FROM categories WHERE id = $1",
            category_id
        )
        
        await conn.execute(
            "DELETE FROM categories WHERE id = $1",
            category_id
        )
        
        await callback_query.message.edit_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–¥–∞–ª–µ–Ω–∞"
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        categories = await conn.fetch(
            "SELECT id, name FROM categories ORDER BY name"
        )
        
        if not categories:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(types.InlineKeyboardButton(
                category['name'],
                callback_data=f"addprod_{category['id']}"
            ))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('addprod_'))
async def add_product_category(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[1])
    
    await AdminStates.waiting_product_name.set()
    state = dp.current_state(user=callback_query.from_user.id, chat=callback_query.message.chat.id)
    await state.update_data(category_id=category_id)
    
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )
    await callback_query.answer()

@dp.message_handler(state=AdminStates.waiting_product_name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await AdminStates.waiting_product_description.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AdminStates.waiting_product_description)
async def add_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await AdminStates.waiting_product_price.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ BTC):")

@dp.message_handler(state=AdminStates.waiting_product_price)
async def add_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
        
        await state.update_data(price=price)
        await AdminStates.waiting_product_content.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã):")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")

@dp.message_handler(state=AdminStates.waiting_product_content)
async def add_product_content(message: types.Message, state: FSMContext):
    await state.update_data(content=message.text)
    await AdminStates.waiting_product_locations.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∂–¥–∞—è –ª–æ–∫–∞—Ü–∏—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ù–∞–∑–≤–∞–Ω–∏–µ=–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'):\n\n–ü—Ä–∏–º–µ—Ä:\n–ú–æ—Å–∫–≤–∞=5\n–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥=3")

@dp.message_handler(state=AdminStates.waiting_product_locations)
async def add_product_locations(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        await state.finish()
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        product = await conn.fetchrow(
            "INSERT INTO products (category_id, name, description, price, content) "
            "VALUES ($1, $2, $3, $4, $5) RETURNING id",
            data['category_id'],
            data['name'],
            data['description'],
            data['price'],
            data['content']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
        locations = message.text.split('\n')
        for loc in locations:
            if '=' in loc:
                name, quantity = loc.split('=', 1)
                name = name.strip()
                try:
                    quantity = int(quantity.strip())
                    if quantity > 0:
                        await conn.execute(
                            "INSERT INTO locations (product_id, name, quantity) "
                            "VALUES ($1, $2, $3)",
                            product['id'],
                            name,
                            quantity
                        )
                except ValueError:
                    pass
        
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except asyncpg.UniqueViolationError:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    finally:
        await conn.close()
        await state.finish()
        await admin_panel(message)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        categories = await conn.fetch(
            "SELECT id, name FROM categories ORDER BY name"
        )
        
        if not categories:
            await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(types.InlineKeyboardButton(
                category['name'],
                callback_data=f"delprodcat_{category['id']}"
            ))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('delprodcat_'))
async def delete_product_category(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        products = await conn.fetch(
            "SELECT id, name FROM products WHERE category_id = $1 ORDER BY name",
            category_id
        )
        
        if not products:
            await callback_query.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for product in products:
            keyboard.add(types.InlineKeyboardButton(
                product['name'],
                callback_data=f"deleteprod_{product['id']}"
            ))
        
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('deleteprod_'))
async def delete_product_finish(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        product_name = await conn.fetchval(
            "SELECT name FROM products WHERE id = $1",
            product_id
        )
        
        await conn.execute(
            "DELETE FROM products WHERE id = $1",
            product_id
        )
        
        await callback_query.message.edit_text(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É–¥–∞–ª–µ–Ω"
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    finally:
        await conn.close()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏
@dp.message_handler(text="üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏")
async def manage_locations_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        products = await conn.fetch(
            "SELECT p.id, p.name, c.name as category_name "
            "FROM products p JOIN categories c ON p.category_id = c.id "
            "ORDER BY c.name, p.name"
        )
        
        if not products:
            await message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for product in products:
            keyboard.add(types.InlineKeyboardButton(
                f"{product['category_name']} - {product['name']}",
                callback_data=f"manageloc_{product['id']}"
            ))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('manageloc_'))
async def manage_locations_product(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[1])
    conn = await create_db_connection()
    if not conn:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        product = await conn.fetchrow(
            "SELECT p.name, c.name as category_name "
            "FROM products p JOIN categories c ON p.category_id = c.id "
            "WHERE p.id = $1",
            product_id
        )
        
        locations = await conn.fetch(
            "SELECT id, name, quantity FROM locations "
            "WHERE product_id = $1 ORDER BY name",
            product_id
        )
        
        text = (
            f"üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category_name']}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n\n"
            "–¢–µ–∫—É—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏:\n"
        )
        
        if locations:
            for loc in locations:
                text += f"- {loc['name']}: {loc['quantity']} —à—Ç.\n"
        else:
            text += "–ù–µ—Ç –ª–æ–∫–∞—Ü–∏–π\n"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data=f"addloc_{product_id}"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data=f"removeloc_{product_id}")
        )
        keyboard.row(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"editloc_{product_id}")
        )
        
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π")
    finally:
        await conn.close()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "–û –º–∞–≥–∞–∑–∏–Ω–µ"
@dp.message_handler(text="‚ÑπÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '–û –º–∞–≥–∞–∑–∏–Ω–µ'")
async def edit_about_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        about_text = await conn.fetchval(
            "SELECT about_text FROM shop_info WHERE id = 1"
        )
        
        await AdminStates.waiting_about_text.set()
        state = dp.current_state(user=message.from_user.id, chat=message.chat.id)
        await state.update_data(current_about=about_text)
        
        await message.answer(
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç '–û –º–∞–≥–∞–∑–∏–Ω–µ':\n\n{about_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    finally:
        await conn.close()

@dp.message_handler(state=AdminStates.waiting_about_text)
async def edit_about_finish(message: types.Message, state: FSMContext):
    conn = await create_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        await state.finish()
        return
    
    try:
        await conn.execute(
            "UPDATE shop_info SET about_text = $1, updated_at = NOW() WHERE id = 1",
            message.text
        )
        
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç '–û –º–∞–≥–∞–∑–∏–Ω–µ' –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    finally:
        await conn.close()
        await state.finish()
        await admin_panel(message)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def on_startup(dp):
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if await init_db():
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    else:
        logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

async def on_shutdown(dp):
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await dp.storage.close()
    await dp.storage.wait_closed()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(
        dp,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True
                          )
