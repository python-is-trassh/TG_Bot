import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import asyncpg
from dotenv import load_dotenv
from typing import List, Dict, Any, Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []
DATABASE_URL = os.getenv('DATABASE_URL')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class AddProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_photos = State()
    waiting_for_items = State()

class UserStates(StatesGroup):
    waiting_for_payment = State()

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
class Database:
    @staticmethod
    async def create_connection():
        return await asyncpg.connect(DATABASE_URL)

    @staticmethod
    async def init_db():
        conn = await Database.create_connection()
        try:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    description TEXT,
                    price DECIMAL(10, 2) NOT NULL,
                    photo_ids TEXT[],
                    created_at TIMESTAMP DEFAULT NOW(),
                    is_active BOOLEAN DEFAULT TRUE
                )
            ''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS product_items (
                    id SERIAL PRIMARY KEY,
                    product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
                    location VARCHAR(100) NOT NULL,
                    unique_code VARCHAR(50) UNIQUE NOT NULL,
                    is_sold BOOLEAN DEFAULT FALSE,
                    sold_at TIMESTAMP,
                    sold_to BIGINT
                )
            ''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS carts (
                    user_id BIGINT PRIMARY KEY,
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS cart_items (
                    id SERIAL PRIMARY KEY,
                    cart_user_id BIGINT REFERENCES carts(user_id) ON DELETE CASCADE,
                    product_item_id INTEGER REFERENCES product_items(id),
                    added_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    total_amount DECIMAL(10, 2) NOT NULL,
                    status VARCHAR(20) DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT NOW(),
                    payment_details TEXT
                )
            ''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS order_items (
                    id SERIAL PRIMARY KEY,
                    order_id INTEGER REFERENCES orders(id) ON DELETE CASCADE,
                    product_item_id INTEGER REFERENCES product_items(id),
                    product_name VARCHAR(100) NOT NULL,
                    location VARCHAR(100) NOT NULL,
                    price DECIMAL(10, 2) NOT NULL
                )
            ''')
            
            logger.info("Database tables created successfully")
        except Exception as e:
            logger.error(f"Error creating database tables: {e}")
            raise
        finally:
            await conn.close()

    @staticmethod
    async def execute(query: str, *args):
        conn = await Database.create_connection()
        try:
            return await conn.execute(query, *args)
        finally:
            await conn.close()

    @staticmethod
    async def fetch(query: str, *args):
        conn = await Database.create_connection()
        try:
            return await conn.fetch(query, *args)
        finally:
            await conn.close()

    @staticmethod
    async def fetchrow(query: str, *args):
        conn = await Database.create_connection()
        try:
            return await conn.fetchrow(query, *args)
        finally:
            await conn.close()

    @staticmethod
    async def fetchval(query: str, *args):
        conn = await Database.create_connection()
        try:
            return await conn.fetchval(query, *args)
        finally:
            await conn.close()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def get_or_create_cart(user_id: int) -> Dict[str, Any]:
    cart = await Database.fetchrow(
        'INSERT INTO carts (user_id) VALUES ($1) '
        'ON CONFLICT (user_id) DO UPDATE SET updated_at = NOW() '
        'RETURNING *', 
        user_id
    )
    return cart

async def add_to_cart(user_id: int, product_item_id: int) -> bool:
    item = await Database.fetchrow(
        'SELECT * FROM product_items WHERE id = $1 AND is_sold = FALSE',
        product_item_id
    )
    if not item:
        return False
    
    await Database.execute(
        'INSERT INTO cart_items (cart_user_id, product_item_id) VALUES ($1, $2)',
        user_id, product_item_id
    )
    return True

async def get_cart_contents(user_id: int) -> List[Dict[str, Any]]:
    return await Database.fetch('''
        SELECT 
            ci.id as cart_item_id,
            pi.id as product_item_id,
            p.name,
            p.description,
            p.price,
            pi.location,
            pi.unique_code
        FROM cart_items ci
        JOIN product_items pi ON ci.product_item_id = pi.id
        JOIN products p ON pi.product_id = p.id
        WHERE ci.cart_user_id = $1
        ORDER BY ci.added_at DESC
    ''', user_id)

async def clear_cart(user_id: int):
    await Database.execute('DELETE FROM cart_items WHERE cart_user_id = $1', user_id)

async def create_order(user_id: int, cart_items: List[Dict[str, Any]]) -> Optional[int]:
    total = sum(item['price'] for item in cart_items)
    
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        async with (await Database.create_connection()).transaction():
            order = await Database.fetchrow(
                'INSERT INTO orders (user_id, total_amount) '
                'VALUES ($1, $2) RETURNING id',
                user_id, total
            )
            
            for item in cart_items:
                await Database.execute(
                    'INSERT INTO order_items '
                    '(order_id, product_item_id, product_name, location, price) '
                    'VALUES ($1, $2, $3, $4, $5)',
                    order['id'], item['product_item_id'], item['name'], 
                    item['location'], item['price']
                )
                
                await Database.execute(
                    'UPDATE product_items '
                    'SET is_sold = TRUE, sold_at = NOW(), sold_to = $1 '
                    'WHERE id = $2',
                    user_id, item['product_item_id']
                )
            
            await clear_cart(user_id)
            return order['id']
    except Exception as e:
        logger.error(f"Error creating order: {e}")
        return None

# ========== –ö–û–ú–ê–ù–î–´ ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        
        if message.from_user.id in ADMIN_IDS:
            buttons.append("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        keyboard.add(*buttons)
        
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========
@dp.message_handler(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
        keyboard.add(*buttons)
        
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in admin_panel: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

# ========== –ö–ê–¢–ê–õ–û–ì ==========
@dp.message_handler(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    try:
        products = await Database.fetch(
            'SELECT * FROM products WHERE is_active = TRUE ORDER BY created_at DESC'
        )
        
        if not products:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
            return
        
        for product in products:
            available = await Database.fetchval(
                'SELECT COUNT(*) FROM product_items '
                'WHERE product_id = $1 AND is_sold = FALSE',
                product['id']
            )
            
            text = (
                f"üì¶ <b>{product['name']}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"üõç –î–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.\n"
                f"üìù {product['description']}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
            if product['photo_ids']:
                media = [types.InputMediaPhoto(product['photo_ids'][0], caption=text, parse_mode="HTML")]
                for photo_id in product['photo_ids'][1:]:
                    media.append(types.InputMediaPhoto(photo_id))
                
                await bot.send_media_group(message.chat.id, media)
            
            # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                "üìç –í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é", 
                callback_data=f"select_location:{product['id']}"
            ))
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error showing catalog: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")

# ========== –ö–û–†–ó–ò–ù–ê ==========
@dp.message_handler(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    try:
        cart_items = await get_cart_contents(message.from_user.id)
        
        if not cart_items:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        total = sum(item['price'] for item in cart_items)
        
        text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        for item in cart_items:
            text += (
                f"üì¶ <b>{item['name']}</b>\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {item['location']}\n"
                f"üÜî –ö–æ–¥: {item['unique_code']}\n"
                f"üí∞ –¶–µ–Ω–∞: {item['price']} —Ä—É–±.\n"
                f"‚îî‚îÄ‚îÄ [–£–¥–∞–ª–∏—Ç—å](tg://btn/{item['cart_item_id']})\n\n"
            )
        
        text += f"üíµ <b>–ò—Ç–æ–≥–æ: {total} —Ä—É–±.</b>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
            InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error showing cart: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ==========
@dp.callback_query_handler(lambda c: c.data == 'clear_cart')
async def clear_cart_handler(callback_query: types.CallbackQuery):
    try:
        await clear_cart(callback_query.from_user.id)
        await callback_query.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"Error clearing cart: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith('add_to_cart:'))
async def add_to_cart_handler(callback_query: types.CallbackQuery):
    try:
        item_id = int(callback_query.data.split(':')[1])
        success = await add_to_cart(callback_query.from_user.id, item_id)
        if success:
            await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            await callback_query.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"Error adding to cart: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'checkout')
async def checkout_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        cart_items = await get_cart_contents(user_id)
        
        if not cart_items:
            await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return
        
        order_id = await create_order(user_id, cart_items)
        if order_id:
            total = sum(item['price'] for item in cart_items)
            
            await callback_query.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                f"üí∞ –°—É–º–º–∞: {total} —Ä—É–±.\n"
                f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(cart_items)}\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=None
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                await bot.send_message(
                    admin_id,
                    f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.full_name}\n"
                    f"üí≥ –°—É–º–º–∞: {total} —Ä—É–±.\n"
                    f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(cart_items)}"
                )
        else:
            await callback_query.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"Error during checkout: {e}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
            show_alert=True
        )

# ========== –ê–î–ú–ò–ù: –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ==========
@dp.message_handler(state=AddProductStates.waiting_for_name)
async def process_product_name(message: types.Message, state: FSMContext):
    try:
        if len(message.text) > 100:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
            
        await state.update_data(name=message.text)
        await AddProductStates.waiting_for_description.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    except Exception as e:
        logger.error(f"Error processing product name: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
        await state.finish()

@dp.message_handler(state=AddProductStates.waiting_for_description)
async def process_product_description(message: types.Message, state: FSMContext):
    try:
        await state.update_data(description=message.text)
        await AddProductStates.waiting_for_price.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    except Exception as e:
        logger.error(f"Error processing product description: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
        await state.finish()

@dp.message_handler(state=AddProductStates.waiting_for_price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = round(float(message.text), 2)
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
            
        await state.update_data(price=price)
        await AddProductStates.waiting_for_photos.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)")
    except Exception as e:
        logger.error(f"Error processing product price: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã")
        await state.finish()

@dp.message_handler(state=AddProductStates.waiting_for_photos, content_types=types.ContentType.PHOTO)
async def process_product_photos(message: types.Message, state: FSMContext):
    try:
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            return
            
        photo_ids = [photo.file_id for photo in message.photo]
        await state.update_data(photo_ids=photo_ids)
        
        data = await state.get_data()
        
        product = await Database.fetchrow(
            '''INSERT INTO products 
            (name, description, price, photo_ids) 
            VALUES ($1, $2, $3, $4) 
            RETURNING id, name''',
            data['name'],
            data['description'],
            data['price'],
            data['photo_ids']
        )
        
        await state.update_data(product_id=product['id'])
        await AddProductStates.waiting_for_items.set()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä {product['name']} —Å–æ–∑–¥–∞–Ω.\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, ABC123"
        )
    except Exception as e:
        logger.error(f"Error processing product photos: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        await state.finish()

@dp.message_handler(state=AddProductStates.waiting_for_items)
async def process_product_items(message: types.Message, state: FSMContext):
    try:
        if message.text.lower() == '/done':
            data = await state.get_data()
            items_count = await Database.fetchval(
                'SELECT COUNT(*) FROM product_items WHERE product_id = $1',
                data['product_id']
            )
            
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {items_count}"
            )
            await state.finish()
            return
            
        parts = [p.strip() for p in message.text.split(',')]
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
            
        location = parts[0]
        unique_code = parts[1]
        
        if not location or not unique_code:
            raise ValueError("–õ–æ–∫–∞—Ü–∏—è –∏ –∫–æ–¥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            
        data = await state.get_data()
        
        await Database.execute(
            'INSERT INTO product_items (product_id, location, unique_code) '
            'VALUES ($1, $2, $3)',
            data['product_id'], location, unique_code
        )
        
        await message.answer(
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n"
            f"üÜî –ö–æ–¥: {unique_code}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
    except asyncpg.UniqueViolationError:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–§–æ—Ä–º–∞—Ç: '–õ–æ–∫–∞—Ü–∏—è, –ö–æ–¥'")
    except Exception as e:
        logger.error(f"Error processing product items: {e}")
        await message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()

# ========== –ó–ê–ü–£–°–ö ==========
async def on_startup(dp):
    try:
        logger.info("Starting bot initialization...")
        await Database.init_db()
        
        if ADMIN_IDS:
            await bot.send_message(ADMIN_IDS[0], "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        logger.info("Bot started successfully")
    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")
        raise

async def on_shutdown(dp):
    try:
        if ADMIN_IDS:
            await bot.send_message(ADMIN_IDS[0], "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        await dp.storage.close()
        await dp.storage.wait_closed()
        logger.info("Bot stopped gracefully")
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")

if __name__ == '__main__':
    try:
        executor.start_polling(
            dp,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True
        )
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
