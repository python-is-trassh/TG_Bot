import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import asyncpg
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []
DATABASE_URL = os.getenv('DATABASE_URL')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class AddProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_photos = State()
    waiting_for_items = State()

class UserStates(StatesGroup):
    waiting_for_payment = State()

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
async def create_db_connection():
    return await asyncpg.connect(DATABASE_URL)

async def init_db():
    conn = await create_db_connection()
    try:
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                price DECIMAL(10, 2) NOT NULL,
                photo_ids TEXT[],
                created_at TIMESTAMP DEFAULT NOW(),
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS product_items (
                id SERIAL PRIMARY KEY,
                product_id INTEGER REFERENCES products(id),
                location VARCHAR(100) NOT NULL,
                unique_code VARCHAR(50) UNIQUE NOT NULL,
                is_sold BOOLEAN DEFAULT FALSE,
                sold_at TIMESTAMP,
                sold_to INTEGER
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS carts (
                user_id BIGINT PRIMARY KEY,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS cart_items (
                id SERIAL PRIMARY KEY,
                cart_user_id BIGINT REFERENCES carts(user_id) ON DELETE CASCADE,
                product_item_id INTEGER REFERENCES product_items(id),
                added_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                total_amount DECIMAL(10, 2) NOT NULL,
                status VARCHAR(20) DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT NOW(),
                payment_details TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                id SERIAL PRIMARY KEY,
                order_id INTEGER REFERENCES orders(id) ON DELETE CASCADE,
                product_item_id INTEGER REFERENCES product_items(id),
                product_name VARCHAR(100) NOT NULL,
                location VARCHAR(100) NOT NULL,
                price DECIMAL(10, 2) NOT NULL
            )
        ''')
        
        logger.info("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        await conn.close()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def get_or_create_cart(user_id: int):
    conn = await create_db_connection()
    try:
        cart = await conn.fetchrow(
            'INSERT INTO carts (user_id) VALUES ($1) '
            'ON CONFLICT (user_id) DO UPDATE SET updated_at = NOW() '
            'RETURNING *', 
            user_id
        )
        return cart
    finally:
        await conn.close()

async def add_to_cart(user_id: int, product_item_id: int):
    conn = await create_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        item = await conn.fetchrow(
            'SELECT * FROM product_items WHERE id = $1 AND is_sold = FALSE',
            product_item_id
        )
        if not item:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        await conn.execute(
            'INSERT INTO cart_items (cart_user_id, product_item_id) VALUES ($1, $2)',
            user_id, product_item_id
        )
        return True
    finally:
        await conn.close()

async def get_cart_contents(user_id: int):
    conn = await create_db_connection()
    try:
        return await conn.fetch('''
            SELECT 
                ci.id as cart_item_id,
                pi.id as product_item_id,
                p.name,
                p.description,
                p.price,
                pi.location,
                pi.unique_code
            FROM cart_items ci
            JOIN product_items pi ON ci.product_item_id = pi.id
            JOIN products p ON pi.product_id = p.id
            WHERE ci.cart_user_id = $1
            ORDER BY ci.added_at DESC
        ''', user_id)
    finally:
        await conn.close()

async def clear_cart(user_id: int):
    conn = await create_db_connection()
    try:
        await conn.execute('DELETE FROM cart_items WHERE cart_user_id = $1', user_id)
    finally:
        await conn.close()

# ========== –ö–û–ú–ê–ù–î–´ ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    
    if message.from_user.id in ADMIN_IDS:
        buttons.append("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    keyboard.add(*buttons)
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message_handler(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# ========== –ö–ê–¢–ê–õ–û–ì ==========
@dp.message_handler(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    conn = await create_db_connection()
    try:
        products = await conn.fetch(
            'SELECT * FROM products WHERE is_active = TRUE ORDER BY created_at DESC'
        )
        
        if not products:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
            return
        
        for product in products:
            available = await conn.fetchval(
                'SELECT COUNT(*) FROM product_items '
                'WHERE product_id = $1 AND is_sold = FALSE',
                product['id']
            )
            
            text = (
                f"üì¶ <b>{product['name']}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"üõç –î–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.\n"
                f"üìù {product['description']}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
            if product['photo_ids']:
                media = [types.InputMediaPhoto(product['photo_ids'][0], caption=text, parse_mode="HTML")]
                for photo_id in product['photo_ids'][1:]:
                    media.append(types.InputMediaPhoto(photo_id))
                
                await bot.send_media_group(message.chat.id, media)
            
            # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                "üìç –í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é", 
                callback_data=f"select_location:{product['id']}"
            ))
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('select_location:'))
async def select_location(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split(':')[1])
    
    conn = await create_db_connection()
    try:
        locations = await conn.fetch(
            'SELECT DISTINCT location FROM product_items '
            'WHERE product_id = $1 AND is_sold = FALSE '
            'ORDER BY location',
            product_id
        )
        
        if not locations:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        for loc in locations:
            keyboard.add(InlineKeyboardButton(
                loc['location'],
                callback_data=f"show_items:{product_id}:{loc['location']}"
            ))
        
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=keyboard
        )
    finally:
        await conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('show_items:'))
async def show_available_items(callback_query: types.CallbackQuery):
    _, product_id, location = callback_query.data.split(':')
    product_id = int(product_id)
    
    conn = await create_db_connection()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product = await conn.fetchrow(
            'SELECT name, price FROM products WHERE id = $1',
            product_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        items = await conn.fetch(
            'SELECT id, unique_code FROM product_items '
            'WHERE product_id = $1 AND location = $2 AND is_sold = FALSE '
            'ORDER BY unique_code',
            product_id, location
        )
        
        if not items:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π", show_alert=True)
            return
        
        text = (
            f"üì¶ <b>{product['name']}</b>\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã:"
        )
        
        keyboard = InlineKeyboardMarkup(row_width=3)
        for item in items:
            keyboard.insert(InlineKeyboardButton(
                item['unique_code'],
                callback_data=f"add_to_cart:{item['id']}"
            ))
        
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    finally:
        await conn.close()

# ========== –ö–û–†–ó–ò–ù–ê ==========
@dp.message_handler(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    cart_items = await get_cart_contents(message.from_user.id)
    
    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = sum(item['price'] for item in cart_items)
    
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
    for item in cart_items:
        text += (
            f"üì¶ <b>{item['name']}</b>\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {item['location']}\n"
            f"üÜî –ö–æ–¥: {item['unique_code']}\n"
            f"üí∞ –¶–µ–Ω–∞: {item['price']} —Ä—É–±.\n"
            f"‚îî‚îÄ‚îÄ [–£–¥–∞–ª–∏—Ç—å](tg://btn/{item['cart_item_id']})\n\n"
        )
    
    text += f"üíµ <b>–ò—Ç–æ–≥–æ: {total} —Ä—É–±.</b>"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == 'clear_cart')
async def clear_cart_handler(callback_query: types.CallbackQuery):
    await clear_cart(callback_query.from_user.id)
    await callback_query.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data.startswith('add_to_cart:'))
async def add_to_cart_handler(callback_query: types.CallbackQuery):
    item_id = int(callback_query.data.split(':')[1])
    
    success = await add_to_cart(callback_query.from_user.id, item_id)
    if success:
        await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    else:
        await callback_query.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'checkout')
async def checkout(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart_items = await get_cart_contents(user_id)
    
    if not cart_items:
        await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    total = sum(item['price'] for item in cart_items)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    conn = await create_db_connection()
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        async with conn.transaction():
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = await conn.fetchrow(
                'INSERT INTO orders (user_id, total_amount) '
                'VALUES ($1, $2) RETURNING *',
                user_id, total
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            for item in cart_items:
                await conn.execute(
                    'INSERT INTO order_items '
                    '(order_id, product_item_id, product_name, location, price) '
                    'VALUES ($1, $2, $3, $4, $5)',
                    order['id'], item['product_item_id'], item['name'], 
                    item['location'], item['price']
                )
                
                # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π
                await conn.execute(
                    'UPDATE product_items '
                    'SET is_sold = TRUE, sold_at = NOW(), sold_to = $1 '
                    'WHERE id = $2',
                    user_id, item['product_item_id']
                )
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            await conn.execute(
                'DELETE FROM cart_items WHERE cart_user_id = $1',
                user_id
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order['id']} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"üí∞ –°—É–º–º–∞: {total} —Ä—É–±.\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(cart_items)}\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['id']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.full_name}\n"
                f"üí≥ –°—É–º–º–∞: {total} —Ä—É–±.\n"
                f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(cart_items)}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
            show_alert=True
        )
    finally:
        await conn.close()

# ========== –ê–î–ú–ò–ù: –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ==========
@dp.message_handler(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def start_adding_product(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AddProductStates.waiting_for_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AddProductStates.waiting_for_name)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await AddProductStates.waiting_for_description.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AddProductStates.waiting_for_description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await AddProductStates.waiting_for_price.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message_handler(state=AddProductStates.waiting_for_price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
        await state.update_data(price=price)
        await AddProductStates.waiting_for_photos.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")

@dp.message_handler(state=AddProductStates.waiting_for_photos, content_types=types.ContentType.PHOTO)
async def process_product_photos(message: types.Message, state: FSMContext):
    photo_ids = [photo.file_id for photo in message.photo]
    await state.update_data(photo_ids=photo_ids)
    
    data = await state.get_data()
    
    conn = await create_db_connection()
    try:
        product = await conn.fetchrow(
            'INSERT INTO products (name, description, price, photo_ids) '
            'VALUES ($1, $2, $3, $4) RETURNING *',
            data['name'], data['description'], data['price'], data['photo_ids']
        )
        
        await state.update_data(product_id=product['id'])
        await AddProductStates.waiting_for_items.set()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä {product['name']} —Å–æ–∑–¥–∞–Ω.\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, ABC123"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        await state.finish()
    finally:
        await conn.close()

@dp.message_handler(state=AddProductStates.waiting_for_items)
async def process_product_items(message: types.Message, state: FSMContext):
    try:
        parts = [p.strip() for p in message.text.split(',')]
        if len(parts) < 2:
            raise ValueError
        
        location = parts[0]
        unique_code = parts[1]
        
        data = await state.get_data()
        
        conn = await create_db_connection()
        try:
            await conn.execute(
                'INSERT INTO product_items (product_id, location, unique_code) '
                'VALUES ($1, $2, $3)',
                data['product_id'], location, unique_code
            )
            
            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {location} - {unique_code}\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )
        except asyncpg.UniqueViolationError:
            await message.answer("–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ –∫–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, ABC123"
        )

@dp.message_handler(commands=['done'], state=AddProductStates.waiting_for_items)
async def finish_adding_items(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    conn = await create_db_connection()
    try:
        items_count = await conn.fetchval(
            'SELECT COUNT(*) FROM product_items WHERE product_id = $1',
            data['product_id']
        )
        
        product = await conn.fetchrow(
            'SELECT name FROM products WHERE id = $1',
            data['product_id']
        )
        
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {items_count}"
        )
    finally:
        await conn.close()
        await state.finish()

@dp.message_handler(state=AddProductStates.waiting_for_items)
async def process_product_items(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not all(k in data for k in ['name', 'description', 'price', 'photo_ids', 'product_id']):
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")

        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é –∏ –∫–æ–¥
        parts = message.text.split(',')
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: '–õ–æ–∫–∞—Ü–∏—è, –ö–æ–¥'")

        location = parts[0].strip()
        unique_code = parts[1].strip()

        if not location or not unique_code:
            raise ValueError("–õ–æ–∫–∞—Ü–∏—è –∏ –∫–æ–¥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")

        conn = None
        try:
            conn = await asyncpg.connect(DATABASE_URL)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
            code_exists = await conn.fetchval(
                "SELECT EXISTS (SELECT 1 FROM product_items WHERE unique_code = $1)",
                unique_code
            )
            if code_exists:
                await message.answer("–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            await conn.execute(
                """INSERT INTO product_items 
                (product_id, location, unique_code) 
                VALUES ($1, $2, $3)""",
                data['product_id'], location, unique_code
            )

            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n"
                f"üÜî –ö–æ–¥: {unique_code}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )

        except asyncpg.UniqueViolationError:
            await message.answer("‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        except asyncpg.PostgresError as e:
            logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        finally:
            if conn:
                await conn.close()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()

# ========== –ó–ê–ü–£–°–ö ==========
async def on_startup(dp):
    await init_db()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
